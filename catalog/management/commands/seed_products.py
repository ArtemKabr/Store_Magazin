# catalog/management/commands/seed_products.py
from __future__ import annotations

from decimal import Decimal
from hashlib import md5
from pathlib import Path

from django.core.management.base import BaseCommand
from django.db import transaction
from django.utils.text import slugify

from catalog.models import Category, Product

# –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
MEDIA_ROOT = Path(__file__).resolve().parent.parent.parent.parent / "media" / "products"


def make_unique_slug(text: str, used: set[str]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ slug (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)."""
    base = slugify(text, allow_unicode=True).strip()
    if not base:
        base = md5(text.encode("utf-8")).hexdigest()[:8]
    slug = base
    i = 1
    while slug in used:
        slug = f"{base}-{i}"
        i += 1
    used.add(slug)
    return slug


class Command(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏."""

    help = "–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã Category –∏ Product, " "–¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ media/products."

    def handle(self, *args, **options):
        with transaction.atomic():
            self.stdout.write("üóë –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
            Product.objects.all().delete()
            Category.objects.all().delete()

            # === –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
            categories_data = [
                ("–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤"),
                ("–ù–æ—É—Ç–±—É–∫–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ—É—Ç–±—É–∫–æ–≤"),
                ("–ù–∞—É—à–Ω–∏–∫–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞—É–¥–∏–æ-–∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤"),
            ]

            used_cat_slugs: set[str] = set()
            categories = [
                Category(
                    name=name,
                    slug=make_unique_slug(name, used_cat_slugs),
                    description=desc,
                )
                for name, desc in categories_data
            ]
            Category.objects.bulk_create(categories)
            categories = list(Category.objects.all())

            # === –ü—Ä–æ–¥—É–∫—Ç—ã ===
            products_data = [
                ("iPhone 14", Decimal("799.99"), "–°–º–∞—Ä—Ç—Ñ–æ–Ω Apple iPhone 14"),
                ("Samsung Galaxy S23", Decimal("749.00"), "–§–ª–∞–≥–º–∞–Ω Samsung"),
                ("MacBook Air 13", Decimal("1199.00"), "–ù–æ—É—Ç–±—É–∫ Apple M2"),
                ("ASUS ZenBook", Decimal("1099.00"), "–£–ª—å—Ç—Ä–∞–±—É–∫ ASUS"),
                ("AirPods Pro 2", Decimal("249.00"), "–ù–∞—É—à–Ω–∏–∫–∏ Apple"),
                ("Sony WH-1000XM5", Decimal("349.00"), "–ù–∞—É—à–Ω–∏–∫–∏ Sony"),
            ]

            used_prod_slugs: set[str] = set()
            products: list[Product] = []

            for idx, (title, price, desc) in enumerate(products_data):
                category = categories[idx % len(categories)]

                # === –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
                slug_name = slugify(title, allow_unicode=True)
                possible_files = list(MEDIA_ROOT.glob(f"{slug_name}.*"))
                image_path = None
                if possible_files:
                    image_path = f"products/{possible_files[0].name}"

                products.append(
                    Product(
                        title=title,
                        slug=make_unique_slug(title, used_prod_slugs),
                        price=price,
                        description=desc,
                        category=category,
                        is_published=True,
                        image=image_path,  # –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º
                    )
                )

            Product.objects.bulk_create(products)
            self.stdout.write(self.style.SUCCESS("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."))
