"""–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è users."""
from django.contrib.auth.models import AbstractUser, BaseUserManager
from django.db import models


class UserManager(BaseUserManager):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ username."""

    use_in_migrations = True

    def _create_user(self, email, password, **extra_fields):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email –∏ –ø–∞—Ä–æ–ª–µ–º."""
        if not email:
            raise ValueError("Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_user(self, email, password=None, **extra_fields):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        extra_fields.setdefault("is_staff", False)
        extra_fields.setdefault("is_superuser", False)
        return self._create_user(email, password, **extra_fields)

    def create_superuser(self, email, password=None, **extra_fields):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)

        if extra_fields.get("is_staff") is not True:
            raise ValueError("–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å is_staff=True.")
        if extra_fields.get("is_superuser") is not True:
            raise ValueError("–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å is_superuser=True.")

        return self._create_user(email, password, **extra_fields)


class User(AbstractUser):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ email)."""

    username = None
    email = models.EmailField("Email", unique=True)
    avatar = models.ImageField("–ê–≤–∞—Ç–∞—Ä", upload_to="avatars/", blank=True, null=True)
    phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20, blank=True)
    country = models.CharField("–°—Ç—Ä–∞–Ω–∞", max_length=100, blank=True)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS: list[str] = []

    # üëá –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞!
    objects = UserManager()

    def __str__(self):
        return self.email
